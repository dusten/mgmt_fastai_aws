---
- hosts: local
# Select Instance Type to Use
  vars_prompt:
  - name: ec2_type
    prompt: "Which Type of Instance to deploy?\n
     1- p2.xl   - 1  NVIDIA K80\n
     2- p2.8xl  - 8  NVIDIA K80\n
     3- p2.16xl - 16 NVIDIA K80\n
     4- p3.2xl  - 1 Tesla V100\n
     5- p3.8xl  - 4 Tesla V100\n
     6- p3.16xl - 8 Tesla V100\n
     7- g3s.xl  - 1 Tesla M60 (4vCPU)\n
     8- g3.4xl  - 1 Tesla M60 (16vCPU)\n
     10- g3.16xl - 4 Tesla M60\n"
    private:               "no"
    default:               "0"

  - name: ebsopt
    prompt: "Do you want to use an EBS optimized Instance?\n
     0- No \n
     1- Yes \n"
    private:               "no"
    default:               "0"

  pre_tasks:
  - name: Set Instance Type
    set_fact:
      fastai_ec2_type:     "p2.xlarge"
    when:  'ec2_type == "1"'

  - set_fact:
      fastai_ec2_type:     "p2.8xlarge"
    when:  'ec2_type == "2"'

  - set_fact:
      fastai_ec2_type:     "p2.16xlarge"
    when:  'ec2_type == "3"'

  - set_fact:
      fastai_ec2_type:     "p3.2xlarge"
    when:  'ec2_type == "4"'

  - set_fact:
      fastai_ec2_type:     "p3.8xlarge"
    when:  'ec2_type == "5"'

  - set_fact:
      fastai_ec2_type:     "p3.16xlarge"
    when:  'ec2_type == "6"'

  - set_fact:
      fastai_ec2_type:     "g3s.xlarge"
    when:  'ec2_type == "7"'

  - set_fact:
      fastai_ec2_type:     "g3.4xlarge"
    when:  'ec2_type == "8"'

  - set_fact:
      fastai_ec2_type:     "g3.8xlarge"
    when:  'ec2_type == "9"'

  - set_fact:
      fastai_ec2_type:     "g3.16xlarge"
    when:  'ec2_type == "10"'

  - set_fact:
      fastai_ec2_type:     "t3.large"
    when:  'ec2_type == "0"'

  - set_fact:
      ebs_opt:     "no"
    when:  'ebsopt == "0"'

  - set_fact:
      ebs_opt:     "yes"
    when:  'ebsopt == "1"'

  - name: Find Public IP Address For SG
    ipify_facts:
    register: pub_ip
    
  - name: Setting Public IP to usable variable
    set_fact:
      my_ip:                "{{ pub_ip.ansible_facts.ipify_public_ip }}"

  - name: Setup AWS CLI (1/3)
    shell: >
      aws configure set aws_access_key_id "{{ aws_access_key }}"

  - name: Setup AWS CLI (2/3)
    shell: >
      aws configure set aws_secret_access_key "{{ aws_secret_key }}"

  tasks:
  - name: Reset Inventory File
    copy:
      content: |
                [local]
                localhost ansible_connection=local

                [fastai_host]
      dest: inventory

# Get AWS Regions
  - name: Getting all Regions
    aws_region_facts:
      aws_access_key:       "{{ aws_access_key }}"
      aws_secret_key:       "{{ aws_secret_key }}"
    register: regions

# Get Spot Price in Each Region for Instance Type
  - name: Get Spot
    shell: >
      aws configure set region "{{ item.region_name }}" && aws ec2 describe-spot-price-history --instance-types "{{ fastai_ec2_type }}" --product-description "Linux/UNIX (Amazon VPC)" --start-time {{ ansible_date_time.iso8601 }}  --end-time {{ ansible_date_time.iso8601 }}
    register: spot
    with_items: "{{ regions.regions }}"

  - name: Create Spot Price
    set_fact: 
      spot_prices:          "{{ (spot_prices | default([])) + ((item.stdout | from_json).SpotPriceHistory) }}"
    with_items: "{{ spot.results }}"
    when: '((item.stdout | from_json).SpotPriceHistory | length)'
    
  - name: Debug
    debug:
      msg: "{{ (spot_prices | sort(attribute='SpotPrice'))[0] }}"

# Find lowest spot price Region
  - name: Set fastai Region
    set_fact:
      fastai_az:            "{{ (spot_prices | sort(attribute='SpotPrice'))[0].AvailabilityZone[-1] }}"
      fastai_region:        "{{ (spot_prices | sort(attribute='SpotPrice'))[0].AvailabilityZone[0:-1] }}"
      fastai_spot:          "{{ (spot_prices | sort(attribute='SpotPrice'))[0].SpotPrice }}"

  - name: Set AWS Region
    set_fact:
      aws_region:           "{{ fastai_region }}"

  - name: Setup AWS CLI (3/3)
    shell: >
      aws configure set region "{{ aws_region }}"

# Create SSH-Key for Region
  - name: SSH Creating Key Pair
    ec2_key:
      region:               "{{ aws_region }}"
      aws_access_key:       "{{ aws_access_key }}"
      aws_secret_key:       "{{ aws_secret_key }}"
      name:                 "{{ ssh_keyname }}_{{ aws_region }}_key"
    register: ec2_key

  - name: Saving EC2 key to local directory
    copy:
      content:              "{{ ec2_key.key.private_key }}"
      dest:                 "./{{ ssh_keyname }}_{{ aws_region }}_key.pem"
      mode:                 0600
    when: ec2_key.changed

# Create VPC and IGW in Region
  - name: Create {{ vpc_name }} with {{ vpc_cidr }}
    ec2_vpc_net:
      region:               "{{ aws_region }}"
      aws_access_key:       "{{ aws_access_key }}"
      aws_secret_key:       "{{ aws_secret_key }}"
      name:                 "{{ vpc_name }}"
      cidr_block:           "{{ vpc_cidr }}"
      resource_tags:
        Environment:        "{{ env }}"
        Owner:              "{{ owner }}"
        Used_for:           "{{ used_for }}"
      state:                "present"
    register: VPC

  - name: Set VPC ID - {{ VPC.vpc.id }} in variable
    set_fact:
      VPC_id:               "{{ VPC.vpc.id }}"

  - name: Create IGW for {{ vpc_name }}
    ec2_vpc_igw:
      region:               "{{ aws_region }}"
      aws_access_key:       "{{ aws_access_key }}"
      aws_secret_key:       "{{ aws_secret_key }}"
      vpc_id:               "{{ VPC_id }}"
      state:                "present"
    register: VPC_igw

  - name: Set Internet Gateway ID - {{ VPC_igw.gateway_id }} in variable
    set_fact:
      VPC_igw_id:           "{{ VPC_igw.gateway_id }}"

  - name: Tagging IGW resource with {{ vpc_name }}_igw tag
    ec2_tag:
      region:               "{{ aws_region }}"
      aws_access_key:       "{{ aws_access_key }}"
      aws_secret_key:       "{{ aws_secret_key }}"
      resource:             "{{ VPC_igw_id }}"
      state:                "present"
      tags:
        Name:               "{{ vpc_name }}_igw"
        Environment:        "{{ env }}"
        Owner:              "{{ owner }}"
        Used_for:           "{{ used_for }}"

# Create Subnet for Region
  - name: Create {{ vpc_name }} Subnet
    ec2_vpc_subnet:
      region:               "{{ aws_region }}"
      aws_access_key:       "{{ aws_access_key }}"
      aws_secret_key:       "{{ aws_secret_key }}"
      vpc_id:               "{{ VPC_id }}"
      cidr:                 "{{ item.subnet }}"
      az:                   "{{ aws_region }}{{ item.az }}"
      state:                "present"
      resource_tags:
        Name:               "{{ vpc_name }}_{{ item.az }}_{{ item.interface }}"
        Environment:        "{{ env }}"
        Owner:              "{{ owner }}"
        Used_for:           "{{ used_for }}"
        Interface:          "{{ item.interface }}"
    with_items: "{{ vpc_subnet }}"
    register: VPC_subnets
    when: 'item.az == fastai_az'

  - name: Append returned to list subnet_ids
    set_fact:
      VPC_subnet_ids:       "{{ (VPC_subnet_ids | default([])) + [ item.subnet.id ] }}"
    with_items: "{{ VPC_subnets.results }}"
    when: 'item.subnet is defined'

  - name: Set up {{ vpc_name }} route table
    ec2_vpc_route_table:
      region:               "{{ aws_region }}"
      aws_access_key:       "{{ aws_access_key }}"
      aws_secret_key:       "{{ aws_secret_key }}"
      vpc_id:               "{{ VPC_id }}"
      tags:
        Name:               "{{ vpc_name }}"
        Environment:        "{{ env }}"
        Owner:              "{{ owner }}"
        Used_for:           "{{ used_for }}"
      subnets:
        "{{ VPC_subnet_ids }}"
      routes:
        - dest:           "0.0.0.0/0"
          gateway_id:     "{{ VPC_igw_id }}"

# Create Security Group for Region
  - name: Get Security FastAI Group ID
    ec2_group:
      region:               "{{ aws_region }}"
      aws_access_key:       "{{ aws_access_key }}"
      aws_secret_key:       "{{ aws_secret_key }}"
      name:                 "{{ vpc_name }}_ext_sg"
      description:          "{{ vpc_name }} External SSH Access"
      vpc_id:               "{{ VPC_id }}"
    register: ec2_sg
  
  - name: Set VPC U SG ID
    set_fact:
      VPC_sg_id:          "{{ ec2_sg.group_id }}"

  - name: Update Main Security Group U
    ec2_group:
      name:                 "{{ vpc_name }}_ext_sg"
      description:          "{{ vpc_name }} External SSH Access"
      vpc_id:               "{{ VPC_id }}"
      region:               "{{ aws_region }}"
      aws_access_key:       "{{ aws_access_key }}"
      aws_secret_key:       "{{ aws_secret_key }}"
      rules:
      - proto:              "all"
        cidr_ip:            "{{ my_ip }}/32"

  - name: Tagging Security Group with Environment
    ec2_tag:
      region:               "{{ aws_region }}"
      aws_access_key:       "{{ aws_access_key }}"
      aws_secret_key:       "{{ aws_secret_key }}"
      resource:             "{{ VPC_sg_id }}"
      state:                "present"
      tags:
        Environment:        "{{ env }}"
        Name:               "{{ vpc_name }}_ext_sg"
        Owner:              "{{ owner }}"
        Used_for:           "{{ used_for }}"

# Find AMI ID
  - name: Search for all of the AMIs in {{ aws_region }} which match {{ fastai_ami_base }}
    ec2_ami_facts:
      region:               "{{ aws_region }}"
      aws_access_key:       "{{ aws_access_key }}"
      aws_secret_key:       "{{ aws_secret_key }}"
      filters:
        name:               "{{ fastai_ami_base }}"
        owner-alias:        "{{ fastai_ami_owner }}"
    register: amifind

  - name: Set fastai_ami ID 
    set_fact:
      fastai_ami:             "{{ (amifind.images | sort(attribute='creation_date'))[-1].image_id }}" 

  - name: Confirm Instance Launch
    pause:
      prompt: "Starting Instance in {{ fastai_region }} for {{ ((fastai_spot|float + 0.001) | round(5,'ceil')) }}."
      seconds: 10

# Launch Spot Instance
  - name: Launching FastAI Instances
    ec2:
      region:               "{{ aws_region }}"
      aws_access_key:       "{{ aws_access_key }}"
      aws_secret_key:       "{{ aws_secret_key }}"
      spot_price:           "{{ ((fastai_spot|float + 0.001) | round(5,'ceil')) }}"
      spot_type:            "one-time"
      spot_launch_group:    "fastai_{{ fastai_az }}"
      instance_type:        "{{ fastai_ec2_type }}"
      image:                "{{ fastai_ami }}"
      keypair:              "{{ ssh_keyname }}_{{ aws_region }}_key"
      count:                1
      vpc_subnet_id:        "{{ VPC_subnet_ids[0] }}"
      group_id:             "{{ VPC_sg_id }}"
      ebs_optimized:        "{{ ebs_opt }}"
      volumes:              "{{ volumes_fastai }}"
      assign_public_ip:     "yes"
      wait:                 "yes"
      instance_tags:
        Name:               "{{ FastAI_Name }}"
        Environment:        "{{ env }}"
        Owner:              "{{ owner }}"
        Used_for:           "{{ used_for }}"
    register: fastai_instances

  - name: Instance IDs for FastAI
    set_fact:
      fastai_host:
      - name:               "{{ fastai_instances.instances[0].tags.Name }}"
        id:                 "{{ fastai_instances.instances[0].id }}"
        public_ip:          "{{ fastai_instances.instances[0].public_ip }}"
        private_ip:         "{{ fastai_instances.instances[0].private_ip }}"

# Update DNS
  - name: Create Production EC2 Forward DNS records
    route53:
      command:              "create"
      zone:                 "{{ domain_name }}"
      overwrite:            "yes"
      record:               "{{ item.name }}.{{ domain_name }}"
      type:                 "A"
      value:                "{{ item.public_ip }}"
      ttl:                  "60"
    with_items: "{{ fastai_host }}"

# Update Inventory File
  - name: Add FastAI to Invtory File
    lineinfile:
      dest:                 "./inventory"
      insertafter:          '\[fastai_host\]'
      line:                 "{{ item.name }} ansible_ssh_private_key_file=./{{ ssh_keyname }}_{{ aws_region }}_key.pem ansible_ssh_user={{ fastai_user }} ansible_ssh_host={{ item.public_ip }} ansible_ssh_port=22 private_ip={{ item.private_ip }}"
    with_items: "{{ fastai_host }}"

# Wait for Instace to Start
- name: Refreshing Inventory
  hosts: local
  tasks:
  - meta: refresh_inventory
  
- name: Configure FastAI Host
  hosts: fastai_host
  gather_facts: no

  tasks:
  - name: Wait for port 22 to be ready
    local_action: wait_for port=22 host="{{ ansible_ssh_host }}"  search_regex=OpenSSH delay=3 timeout=600 sleep=5

  - name: Set Hostname
    hostname:
      name:                 "{{ inventory_hostname }}"
    become:                 "yes"
    become_method:          "sudo"

  - name: Clone Fastai Course Work
    git:
      repo:                 "https://github.com/fastai/course-v3"
      dest:                 "~/course-v3"

  - name: Upgrade PIP and Setuptools - as root
    pip:
      name:
        - pip
        - setuptools
      state:                "latest"
      extra_args:           "--upgrade"
    become:                 "yes"
    become_method:          "sudo"

  - name: Upgrade PIP and Setuptools - as {{ fastai_user }}
    pip:
      name:
        - pip
        - setuptools
      state:                "latest"
      extra_args:           "--upgrade"


  - name: Install PIP Modules - as root
    pip:
      name:
        - environment_kernels
        - ipyparallel
      state:                "latest"
    become:                 "yes"
    become_method:          "sudo"

  - name: Install PIP Modules - as {{ fastai_user }}
    pip:
      name:
        - environment_kernels
        - ipyparallel
      state:                "latest"

# Update Conda / Install Packages
  - name: Uninsall Conda Packages - pillow pil jpeg libtiff
    shell: "source $HOME/.bashrc && conda uninstall -y --force pillow pil jpeg libtiff"
    environment:
      CONDA_INSTRUMENTATION_ENABLED: 1
    args:
      executable: "/bin/bash"

  - name: Uninstall Pip Packages - pillow pil jpeg libtiff
    shell: "source $HOME/.bashrc && pip uninstall -y pillow pil jpeg libtiff"
    args:
      executable: "/bin/bash"

  - name: Update Conda
    shell: "source $HOME/.bashrc && conda config --set ssl_verify no && conda update -y conda"
    environment:
      CONDA_INSTRUMENTATION_ENABLED: 1
    args:
      executable: "/bin/bash"

  - name: Insall Conda Packages - pytorch cuda92
    shell: "source $HOME/.bashrc && conda config --set ssl_verify no && conda install -y -c pytorch pytorch torchvision cuda92"
    environment:
      CONDA_INSTRUMENTATION_ENABLED: 1
    args:
      executable: "/bin/bash"

  - name: Insall Conda Packages - fastai
    shell: "source $HOME/.bashrc && conda config --set ssl_verify no && conda install -y -c fastai fastai "
    environment:
      CONDA_INSTRUMENTATION_ENABLED: 1
    args:
      executable: "/bin/bash"

  - name: Insall Conda Packages - libjpeg-turbo jupyter_nbextesions
    shell: "source $HOME/.bashrc && conda config --set ssl_verify no && conda install -y -c conda-forge libjpeg-turbo jupyter_nbextensions_configurator"
    environment:
      CONDA_INSTRUMENTATION_ENABLED: 1
    args:
      executable: "/bin/bash"
      
  - name: Insall Pillow Packages with cc -mavx2
    shell: "source $HOME/.bashrc && CFLAGS=\"${CFLAGS} -mavx2\" pip install --no-cache-dir --upgrade --force-reinstall --no-binary :all: --compile pillow-simd"
    args:
      executable: "/bin/bash"

  - name: Install Conda jpeg libtiff
    shell: "source $HOME/.bashrc && conda config --set ssl_verify no && conda install -y jpeg libtiff"
    environment:
      CONDA_INSTRUMENTATION_ENABLED: 1
    args:
      executable: "/bin/bash"

  - name: Install Pip Packages
    shell: "source $HOME/.bashrc && pip install matplotlib nvidia-ml-py3 environment_kernels ipyparallel"
    args:
      executable: "/bin/bash"

  - name: Adding Repository
    apt_repository:
      repo:                 "ppa:jonathonf/ffmpeg-4"
    become:                 "yes"
    become_method:          "sudo"

  - name: Install ffmpeg.
    apt:
      name:                 "ffmpeg"
      state:                "latest"
    become:                 "yes"
    become_method:          "sudo"

# Software Update
  - name: Upgrade all packages to the latest version
    apt:
      update_cache:         "yes" 
      upgrade:              "full"
    become:                 "yes"
    become_method:          "sudo"

  - name: Rebooting Controllers to Apply updates
    reboot:
      msg:                  "Rebooting To Apply Updates -- Ansible"
    become:                 "yes"
    become_method:          "sudo"

  - name: Wait for port 22 to be ready
    local_action: wait_for port=22 host="{{ ansible_ssh_host }}"  search_regex=OpenSSH delay=5 timeout=600 sleep=5

  - name: Testing for Preformance
    shell: "source $HOME/.bashrc && python -c \"import fastai.utils.collect_env; fastai.utils.collect_env.check_perf()\""
    args:
      executable: "/bin/bash"
    register: fastai_env_check

  - name: Checking Preformace Upgrades
    debug:
      msg: "{{ fastai_env_check.stdout_lines }}"

# Print SSH command to Start work
  - name: How to Connect
    debug:
      msg: "ssh -i ./{{ ssh_keyname }}_{{ hostvars['localhost']['aws_region'] }}_key.pem -L localhost:8888:localhost:8888 {{ fastai_user }}@fastai.{{ domain_name }}"
